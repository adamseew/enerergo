#!/usr/bin/python

# Run the trajectories generated by MAIN_eneraware.m in ../matlab/exper/
# make sure all the data are generated (after running the script MAIN_eneraware) in ../matlab/exper/data/ (part_no_[1..28].m)

# accepts one argument, which specifies the id of the part to be flown 
# (i.e., t0 in the figure in "Energy-aware ergodic search: Continuous long-term exploration for multiagent systems" is 1, t1 is 2, etc.)

# uses https://www.bitcraze.io/products/old-products/crazyflie-2-0/


from cflib.crazyflie.swarm import CachedCfFactory
from cflib.crazyflie.swarm import Swarm

import numpy as np
import cflib.crtp
import scipy.io
import time
import sys


URI1='radio://0/80/2M/E7E7E7E700'
URI2='radio://0/80/2M/E7E7E7E702'
URI3='radio://0/80/2M/E7E7E7E703'
URI4='radio://0/80/2M/E7E7E7E705' # crazyflies URIs

z0=0.4 # height from the ground
dt=1
base1=[.1,.3]
base2=[.9,.7]
base3=[.1,.7]
base4=[.9,.3] # locations of the basestations
sequence1=[]
sequence2=[]
base_st1=[]
base_st2=[] # URI1 goes from base_st1 to base_st2; URI2 viceversa
parts=[
    "part_no_1.mat", "part_no_2.mat",
    "part_no_3.mat", "part_no_4.mat",
    "part_no_5.mat", "part_no_6.mat",
    "part_no_7.mat", "part_no_8.mat",
    "part_no_9.mat", "part_no_10.mat",
    "part_no_11.mat","part_no_12.mat",
    "part_no_13.mat","part_no_14.mat",
    "part_no_15.mat","part_no_16.mat",
    "part_no_17.mat","part_no_18.mat",
    "part_no_19.mat","part_no_20.mat",
    "part_no_21.mat","part_no_22.mat",
    "part_no_23.mat","part_no_24.mat",
    "part_no_25.mat","part_no_26.mat",
    "part_no_27.mat","part_no_28.mat"
] # trajectories from matlab
seq_args={}
uris={} # list of URIs


def load_data(id): # call always before load_trajs!
    global seq_args
    global uris
    global base_st1
    global base_st2
    if ((id-1)%2) == 0:
        seq_args={
            URI1:[sequence1],URI2:[sequence2]
        }
        uris={
            URI1,URI2
        }
        if ((id-1)%4)==0:
            base_st1=base1
            base_st2=base2
        else:
            base_st1=base2
            base_st2=base1
    else:
        seq_args={
            URI3:[sequence1],URI2:[sequence2]
        }
        uris={
            URI3,URI4
        }
        if ((id+1)%4):
            base_st1=base3
            base_st2=base4
        else:
            base_st1=base4
            base_st2=base3


def load_trajs(id):
    partsdir="/home/user/Dropbox/acad/papers/energy-ergodic-search/scripts/matlab/exper/data/"
             # make sure the path is correct!
    part1=scipy.io.loadmat(partsdir+parts[2*id-2])
    part2=scipy.io.loadmat(partsdir+parts[2*id-1])
    dbgstrct1=part1['debug']
    dbgstrct2=part2['debug']
    traj1=dbgstrct1['x']
    traj1=traj1[0][0]
    traj2=dbgstrct2['x']
    traj2=traj2[0][0]
    sequence1.append([base_st1[0],base_st1[1],z0,dt])
    for j in range(len(traj1[0])):
        sequence1.append([traj1[0,j],traj1[1,j],z0,dt])
    sequence1.append([base_st2[0],base_st2[1],z0,dt])
    sequence2.append([base_st2[0],base_st2[1],z0,dt])
    for j in range(len(traj2[0])):
        sequence2.append([traj2[0,j],traj2[1,j],z0,dt])
    sequence2.append([base_st1[0],base_st1[1],z0,dt])


def wait_for_param_download(scf):
    while not scf.cf.param.is_updated:
        time.sleep(1.0)
    print('params downloaded for ',scf.cf.link_uri)


def take_off(cf,position):
    take_off_time=5
    sleep_time=0.1
    steps=int(take_off_time/sleep_time)
    vz=position[2]/take_off_time
    
    for i in range(steps):
        cf.commander.send_position_setpoint(position[0],
                                            position[1],
                                            z0*(range(steps)-i/range(steps)),0)
        time.sleep(sleep_time)


def land(cf,position):
    landing_time=5
    sleep_time=0.1
    steps=int(landing_time/sleep_time)
    vz=-position[2]/landing_time

    for i in reversed(range(steps)):
        cf.commander.send_position_setpoint(position[0],
                                            position[1],
                                            z0*(range(steps)-i/range(steps)),0)
                                        #= (z0/(range(steps)+1))*(i+1)
        time.sleep(sleep_time)

    cf.commander.send_stop_setpoint()
    time.sleep(1) # waiting for the packet


def run_sequence(scf,sequence):
    try:
        cf=scf.cf

        take_off(cf,sequence[0])
        for position in sequence:
            print('setting position {}'.format(position))
            end_time=time.time()+position[3]
            while time.time() < end_time:
                cf.commander.send_position_setpoint(position[0],
                                                    position[1],
                                                    position[2],0)
                time.sleep(dt)
        land(cf,sequence[-1])
    except Exception as e:
        print(e)


if __name__ == '__main__':
    load_data(int(sys.argv[1])) # initializing URIs for crazyflies
    load_trajs(int(sys.argv[1])) # loading trajectories from .mat files
    cflib.crtp.init_drivers()

    factory = CachedCfFactory(rw_cache='./cache')
    with Swarm(uris,factory=factory) as swarm:
        # swarm.reset_estimators()
        # uncomment to reset estimators
        print('waiting for params to be downloaded...')
        swarm.parallel(wait_for_param_download)

        swarm.parallel(run_sequence,args_dict=seq_args)

